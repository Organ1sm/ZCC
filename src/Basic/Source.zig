const std = @import("std");
/// Source represents a source code file added to the compilation.
/// Contains the file path, contents buffer, and an ID.
const Source = @This();

/// Definition of the Location structure, used to track a specific position within a Source.
/// It includes fields like ID, byte offset, line, and column.
pub const Location = struct {
    id: ID = .unused,
    byteOffset: u32 = 0,
    line: u32 = 0,

    pub fn eql(a: Location, b: Location) bool {
        return (a.id == b.id) and (a.byteOffset == b.byteOffset) and (a.line == b.line);
    }
};

/// Enumeration ID represents the state of a source code file.
/// - `unused` represent the source file is unused.
/// - `generated` represent the source file is generated by the ZCC.
/// - `_` represent the index of the source file.
pub const ID = enum(u32) {
    unused = 0,
    generated = 1,
    _,
};

/// source file path
path: []const u8,
/// source file content buffer
buffer: []const u8,
///represent source file state or this source file where in position
id: ID,
/// invalid UTF-8 location
invalidUTF8Loc: ?Location = null,

/// Definition of the LineCol structure(corresponding to the byte offset).
const LineCol = struct {
    /// indicate the string content of the source code line
    line: []const u8,
    /// indicate the column number within the line
    col: u32,
    /// visual width
    width: u32,
};

/// Calculates line number, column, and visual width for a given byte offset into the Source.
/// Returns a LineCol struct containing line information.
pub fn getLineCol(source: Source, byteOffset: u32) LineCol {
    // Find the start of the line by moving backward from the given byte offset
    var start: usize = 0;
    if (std.mem.lastIndexOfScalar(u8, source.buffer[0..byteOffset], '\n')) |some|
        start = some + 1;

    var i: usize = start;
    var col: u32 = 1;
    var width: u32 = 0;

    // Iterate from the start of the line to the given byte offset to calculate column and visual width
    while (i < byteOffset) : (col += 1) { // TODO this is still incorrect, but better
        // Determine the byte sequence length and code point at the current position
        const len = std.unicode.utf8ByteSequenceLength(source.buffer[i]) catch unreachable;
        const cp = std.unicode.utf8Decode(source.buffer[i..][0..len]) catch unreachable;
        width += codepointWidth(cp);

        i += len;
    }

    return .{
        .line = std.mem.sliceTo(source.buffer[start..], '\n'),
        .col = col,
        .width = width,
    };
}

/// Determines the display width of a given Unicode code point.
/// Returns 1 for half-width characters and 2 for full-width characters.
fn codepointWidth(cp: u32) u32 {
    return switch (cp) {
        // Half-width characters and special cases
        0x1100...0x115F,
        0x2329,
        0x232A,
        0x2E80...0x303F,
        0x3040...0x3247,
        0x3250...0x4DBF,
        0x4E00...0xA4C6,
        0xA960...0xA97C,
        0xAC00...0xD7A3,
        0xF900...0xFAFF,
        0xFE10...0xFE19,
        0xFE30...0xFE6B,
        0xFF01...0xFF60,
        0xFFE0...0xFFE6,
        0x1B000...0x1B001,
        0x1F200...0x1F251,
        0x20000...0x3FFFD,
        0x1F300...0x1F5FF,
        0x1F900...0x1F9FF,
        => 2,
        else => 1, // Full-width characters
    };
}

/// Returns the first offset, if any, in buf where an invalid utf8 sequence
/// is found.
fn offsetOfInvalidUtf8(buffer: []const u8) ?u32 {
    std.debug.assert(buffer.len <= std.math.maxInt(u32));
    var i: u32 = 0;
    while (i < buffer.len) {
        if (std.unicode.utf8ByteSequenceLength(buffer[i])) |cpLen| {
            if (i + cpLen > buffer.len) return i;
            if (std.meta.isError(std.unicode.utf8Decode(buffer[i .. i + cpLen]))) return i;
            i += cpLen;
        } else |_| return i;
    }
    return null;
}

pub fn checkUtf8(source: *Source) void {
    if (offsetOfInvalidUtf8(source.buffer)) |offset| {
        source.invalidUTF8Loc = Location{ .id = source.id, .byteOffset = offset };
    }
}
